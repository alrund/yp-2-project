// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// EntryRepository is an autogenerated mock type for the EntryRepository type
type EntryRepository struct {
	mock.Mock
}

type EntryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *EntryRepository) EXPECT() *EntryRepository_Expecter {
	return &EntryRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, entry
func (_m *EntryRepository) Add(ctx context.Context, entry *entity.Entry) error {
	ret := _m.Called(ctx, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Entry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type EntryRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - entry *entity.Entry
func (_e *EntryRepository_Expecter) Add(ctx interface{}, entry interface{}) *EntryRepository_Add_Call {
	return &EntryRepository_Add_Call{Call: _e.mock.On("Add", ctx, entry)}
}

func (_c *EntryRepository_Add_Call) Run(run func(ctx context.Context, entry *entity.Entry)) *EntryRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Entry))
	})
	return _c
}

func (_c *EntryRepository_Add_Call) Return(_a0 error) *EntryRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// Change provides a mock function with given fields: ctx, entry
func (_m *EntryRepository) Change(ctx context.Context, entry *entity.Entry) error {
	ret := _m.Called(ctx, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Entry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryRepository_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type EntryRepository_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
//  - ctx context.Context
//  - entry *entity.Entry
func (_e *EntryRepository_Expecter) Change(ctx interface{}, entry interface{}) *EntryRepository_Change_Call {
	return &EntryRepository_Change_Call{Call: _e.mock.On("Change", ctx, entry)}
}

func (_c *EntryRepository_Change_Call) Run(run func(ctx context.Context, entry *entity.Entry)) *EntryRepository_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Entry))
	})
	return _c
}

func (_c *EntryRepository_Change_Call) Return(_a0 error) *EntryRepository_Change_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, entryID
func (_m *EntryRepository) Get(ctx context.Context, entryID uuid.UUID) (*entity.Entry, error) {
	ret := _m.Called(ctx, entryID)

	var r0 *entity.Entry
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Entry); ok {
		r0 = rf(ctx, entryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, entryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntryRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type EntryRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - entryID uuid.UUID
func (_e *EntryRepository_Expecter) Get(ctx interface{}, entryID interface{}) *EntryRepository_Get_Call {
	return &EntryRepository_Get_Call{Call: _e.mock.On("Get", ctx, entryID)}
}

func (_c *EntryRepository_Get_Call) Run(run func(ctx context.Context, entryID uuid.UUID)) *EntryRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *EntryRepository_Get_Call) Return(_a0 *entity.Entry, _a1 error) *EntryRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllByUser provides a mock function with given fields: ctx, user
func (_m *EntryRepository) GetAllByUser(ctx context.Context, user *entity.User) ([]*entity.Entry, error) {
	ret := _m.Called(ctx, user)

	var r0 []*entity.Entry
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) []*entity.Entry); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entity.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntryRepository_GetAllByUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByUser'
type EntryRepository_GetAllByUser_Call struct {
	*mock.Call
}

// GetAllByUser is a helper method to define mock.On call
//  - ctx context.Context
//  - user *entity.User
func (_e *EntryRepository_Expecter) GetAllByUser(ctx interface{}, user interface{}) *EntryRepository_GetAllByUser_Call {
	return &EntryRepository_GetAllByUser_Call{Call: _e.mock.On("GetAllByUser", ctx, user)}
}

func (_c *EntryRepository_GetAllByUser_Call) Run(run func(ctx context.Context, user *entity.User)) *EntryRepository_GetAllByUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *EntryRepository_GetAllByUser_Call) Return(_a0 []*entity.Entry, _a1 error) *EntryRepository_GetAllByUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetOneWithUser provides a mock function with given fields: ctx, entryID, user
func (_m *EntryRepository) GetOneWithUser(ctx context.Context, entryID uuid.UUID, user *entity.User) (*entity.Entry, error) {
	ret := _m.Called(ctx, entryID, user)

	var r0 *entity.Entry
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *entity.User) *entity.Entry); ok {
		r0 = rf(ctx, entryID, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, *entity.User) error); ok {
		r1 = rf(ctx, entryID, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EntryRepository_GetOneWithUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOneWithUser'
type EntryRepository_GetOneWithUser_Call struct {
	*mock.Call
}

// GetOneWithUser is a helper method to define mock.On call
//  - ctx context.Context
//  - entryID uuid.UUID
//  - user *entity.User
func (_e *EntryRepository_Expecter) GetOneWithUser(ctx interface{}, entryID interface{}, user interface{}) *EntryRepository_GetOneWithUser_Call {
	return &EntryRepository_GetOneWithUser_Call{Call: _e.mock.On("GetOneWithUser", ctx, entryID, user)}
}

func (_c *EntryRepository_GetOneWithUser_Call) Run(run func(ctx context.Context, entryID uuid.UUID, user *entity.User)) *EntryRepository_GetOneWithUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*entity.User))
	})
	return _c
}

func (_c *EntryRepository_GetOneWithUser_Call) Return(_a0 *entity.Entry, _a1 error) *EntryRepository_GetOneWithUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Remove provides a mock function with given fields: ctx, entryID
func (_m *EntryRepository) Remove(ctx context.Context, entryID uuid.UUID) error {
	ret := _m.Called(ctx, entryID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, entryID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type EntryRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//  - ctx context.Context
//  - entryID uuid.UUID
func (_e *EntryRepository_Expecter) Remove(ctx interface{}, entryID interface{}) *EntryRepository_Remove_Call {
	return &EntryRepository_Remove_Call{Call: _e.mock.On("Remove", ctx, entryID)}
}

func (_c *EntryRepository_Remove_Call) Run(run func(ctx context.Context, entryID uuid.UUID)) *EntryRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *EntryRepository_Remove_Call) Return(_a0 error) *EntryRepository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEntryRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewEntryRepository creates a new instance of EntryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntryRepository(t mockConstructorTestingTNewEntryRepository) *EntryRepository {
	mock := &EntryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
