// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// UserByCredentialGetter is an autogenerated mock type for the UserByCredentialGetter type
type UserByCredentialGetter struct {
	mock.Mock
}

type UserByCredentialGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *UserByCredentialGetter) EXPECT() *UserByCredentialGetter_Expecter {
	return &UserByCredentialGetter_Expecter{mock: &_m.Mock}
}

// GetByCredential provides a mock function with given fields: ctx, login, passwordHash
func (_m *UserByCredentialGetter) GetByCredential(ctx context.Context, login string, passwordHash string) (*entity.User, error) {
	ret := _m.Called(ctx, login, passwordHash)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.User); ok {
		r0 = rf(ctx, login, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserByCredentialGetter_GetByCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCredential'
type UserByCredentialGetter_GetByCredential_Call struct {
	*mock.Call
}

// GetByCredential is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
//  - passwordHash string
func (_e *UserByCredentialGetter_Expecter) GetByCredential(ctx interface{}, login interface{}, passwordHash interface{}) *UserByCredentialGetter_GetByCredential_Call {
	return &UserByCredentialGetter_GetByCredential_Call{Call: _e.mock.On("GetByCredential", ctx, login, passwordHash)}
}

func (_c *UserByCredentialGetter_GetByCredential_Call) Run(run func(ctx context.Context, login string, passwordHash string)) *UserByCredentialGetter_GetByCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserByCredentialGetter_GetByCredential_Call) Return(_a0 *entity.User, _a1 error) *UserByCredentialGetter_GetByCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewUserByCredentialGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserByCredentialGetter creates a new instance of UserByCredentialGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserByCredentialGetter(t mockConstructorTestingTNewUserByCredentialGetter) *UserByCredentialGetter {
	mock := &UserByCredentialGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
