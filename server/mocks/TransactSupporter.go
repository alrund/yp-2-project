// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TransactSupporter is an autogenerated mock type for the TransactSupporter type
type TransactSupporter struct {
	mock.Mock
}

type TransactSupporter_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactSupporter) EXPECT() *TransactSupporter_Expecter {
	return &TransactSupporter_Expecter{mock: &_m.Mock}
}

// WithinTransaction provides a mock function with given fields: ctx, tFunc
func (_m *TransactSupporter) WithinTransaction(ctx context.Context, tFunc func(context.Context) error) error {
	ret := _m.Called(ctx, tFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, tFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactSupporter_WithinTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransaction'
type TransactSupporter_WithinTransaction_Call struct {
	*mock.Call
}

// WithinTransaction is a helper method to define mock.On call
//  - ctx context.Context
//  - tFunc func(context.Context) error
func (_e *TransactSupporter_Expecter) WithinTransaction(ctx interface{}, tFunc interface{}) *TransactSupporter_WithinTransaction_Call {
	return &TransactSupporter_WithinTransaction_Call{Call: _e.mock.On("WithinTransaction", ctx, tFunc)}
}

func (_c *TransactSupporter_WithinTransaction_Call) Run(run func(ctx context.Context, tFunc func(context.Context) error)) *TransactSupporter_WithinTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *TransactSupporter_WithinTransaction_Call) Return(_a0 error) *TransactSupporter_WithinTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTransactSupporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactSupporter creates a new instance of TransactSupporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactSupporter(t mockConstructorTestingTNewTransactSupporter) *TransactSupporter {
	mock := &TransactSupporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
