// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PasswordHasher is an autogenerated mock type for the PasswordHasher type
type PasswordHasher struct {
	mock.Mock
}

type PasswordHasher_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordHasher) EXPECT() *PasswordHasher_Expecter {
	return &PasswordHasher_Expecter{mock: &_m.Mock}
}

// Hash provides a mock function with given fields: password
func (_m *PasswordHasher) Hash(password string) string {
	ret := _m.Called(password)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PasswordHasher_Hash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hash'
type PasswordHasher_Hash_Call struct {
	*mock.Call
}

// Hash is a helper method to define mock.On call
//  - password string
func (_e *PasswordHasher_Expecter) Hash(password interface{}) *PasswordHasher_Hash_Call {
	return &PasswordHasher_Hash_Call{Call: _e.mock.On("Hash", password)}
}

func (_c *PasswordHasher_Hash_Call) Run(run func(password string)) *PasswordHasher_Hash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PasswordHasher_Hash_Call) Return(_a0 string) *PasswordHasher_Hash_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewPasswordHasher interface {
	mock.TestingT
	Cleanup(func())
}

// NewPasswordHasher creates a new instance of PasswordHasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPasswordHasher(t mockConstructorTestingTNewPasswordHasher) *PasswordHasher {
	mock := &PasswordHasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
