// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// RowQuerier is an autogenerated mock type for the RowQuerier type
type RowQuerier struct {
	mock.Mock
}

type RowQuerier_Expecter struct {
	mock *mock.Mock
}

func (_m *RowQuerier) EXPECT() *RowQuerier_Expecter {
	return &RowQuerier_Expecter{mock: &_m.Mock}
}

// QueryRowContext provides a mock function with given fields: ctx, query, args
func (_m *RowQuerier) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// RowQuerier_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type RowQuerier_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//  - ctx context.Context
//  - query string
//  - args ...interface{}
func (_e *RowQuerier_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *RowQuerier_QueryRowContext_Call {
	return &RowQuerier_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *RowQuerier_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *RowQuerier_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *RowQuerier_QueryRowContext_Call) Return(_a0 *sql.Row) *RowQuerier_QueryRowContext_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewRowQuerier interface {
	mock.TestingT
	Cleanup(func())
}

// NewRowQuerier creates a new instance of RowQuerier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRowQuerier(t mockConstructorTestingTNewRowQuerier) *RowQuerier {
	mock := &RowQuerier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
