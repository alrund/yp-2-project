// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// EntryAdder is an autogenerated mock type for the EntryAdder type
type EntryAdder struct {
	mock.Mock
}

type EntryAdder_Expecter struct {
	mock *mock.Mock
}

func (_m *EntryAdder) EXPECT() *EntryAdder_Expecter {
	return &EntryAdder_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, entry
func (_m *EntryAdder) Add(ctx context.Context, entry *entity.Entry) error {
	ret := _m.Called(ctx, entry)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Entry) error); ok {
		r0 = rf(ctx, entry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EntryAdder_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type EntryAdder_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - entry *entity.Entry
func (_e *EntryAdder_Expecter) Add(ctx interface{}, entry interface{}) *EntryAdder_Add_Call {
	return &EntryAdder_Add_Call{Call: _e.mock.On("Add", ctx, entry)}
}

func (_c *EntryAdder_Add_Call) Run(run func(ctx context.Context, entry *entity.Entry)) *EntryAdder_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Entry))
	})
	return _c
}

func (_c *EntryAdder_Add_Call) Return(_a0 error) *EntryAdder_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEntryAdder interface {
	mock.TestingT
	Cleanup(func())
}

// NewEntryAdder creates a new instance of EntryAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEntryAdder(t mockConstructorTestingTNewEntryAdder) *EntryAdder {
	mock := &EntryAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
