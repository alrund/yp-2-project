// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Execer is an autogenerated mock type for the Execer type
type Execer struct {
	mock.Mock
}

type Execer_Expecter struct {
	mock *mock.Mock
}

func (_m *Execer) EXPECT() *Execer_Expecter {
	return &Execer_Expecter{mock: &_m.Mock}
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *Execer) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Execer_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type Execer_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//  - ctx context.Context
//  - query string
//  - args ...interface{}
func (_e *Execer_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *Execer_ExecContext_Call {
	return &Execer_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Execer_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Execer_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Execer_ExecContext_Call) Return(_a0 sql.Result, _a1 error) *Execer_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewExecer interface {
	mock.TestingT
	Cleanup(func())
}

// NewExecer creates a new instance of Execer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewExecer(t mockConstructorTestingTNewExecer) *Execer {
	mock := &Execer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
