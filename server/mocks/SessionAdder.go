// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// SessionAdder is an autogenerated mock type for the SessionAdder type
type SessionAdder struct {
	mock.Mock
}

type SessionAdder_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionAdder) EXPECT() *SessionAdder_Expecter {
	return &SessionAdder_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, session
func (_m *SessionAdder) Add(ctx context.Context, session *entity.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionAdder_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type SessionAdder_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - session *entity.Session
func (_e *SessionAdder_Expecter) Add(ctx interface{}, session interface{}) *SessionAdder_Add_Call {
	return &SessionAdder_Add_Call{Call: _e.mock.On("Add", ctx, session)}
}

func (_c *SessionAdder_Add_Call) Run(run func(ctx context.Context, session *entity.Session)) *SessionAdder_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Session))
	})
	return _c
}

func (_c *SessionAdder_Add_Call) Return(_a0 error) *SessionAdder_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSessionAdder interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionAdder creates a new instance of SessionAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionAdder(t mockConstructorTestingTNewSessionAdder) *SessionAdder {
	mock := &SessionAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
