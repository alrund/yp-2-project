// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// Connect provides a mock function with given fields:
func (_m *Storage) Connect() *sql.DB {
	ret := _m.Called()

	var r0 *sql.DB
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	return r0
}

// Storage_Connect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Connect'
type Storage_Connect_Call struct {
	*mock.Call
}

// Connect is a helper method to define mock.On call
func (_e *Storage_Expecter) Connect() *Storage_Connect_Call {
	return &Storage_Connect_Call{Call: _e.mock.On("Connect")}
}

func (_c *Storage_Connect_Call) Run(run func()) *Storage_Connect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Storage_Connect_Call) Return(_a0 *sql.DB) *Storage_Connect_Call {
	_c.Call.Return(_a0)
	return _c
}

// Initialization provides a mock function with given fields: migrationDir
func (_m *Storage) Initialization(migrationDir string) error {
	ret := _m.Called(migrationDir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(migrationDir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Initialization_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Initialization'
type Storage_Initialization_Call struct {
	*mock.Call
}

// Initialization is a helper method to define mock.On call
//  - migrationDir string
func (_e *Storage_Expecter) Initialization(migrationDir interface{}) *Storage_Initialization_Call {
	return &Storage_Initialization_Call{Call: _e.mock.On("Initialization", migrationDir)}
}

func (_c *Storage_Initialization_Call) Run(run func(migrationDir string)) *Storage_Initialization_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Storage_Initialization_Call) Return(_a0 error) *Storage_Initialization_Call {
	_c.Call.Return(_a0)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *Storage) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Storage_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Storage_Expecter) Ping(ctx interface{}) *Storage_Ping_Call {
	return &Storage_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *Storage_Ping_Call) Run(run func(ctx context.Context)) *Storage_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Storage_Ping_Call) Return(_a0 error) *Storage_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
