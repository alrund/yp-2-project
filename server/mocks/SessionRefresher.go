// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SessionRefresher is an autogenerated mock type for the SessionRefresher type
type SessionRefresher struct {
	mock.Mock
}

type SessionRefresher_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRefresher) EXPECT() *SessionRefresher_Expecter {
	return &SessionRefresher_Expecter{mock: &_m.Mock}
}

// Change provides a mock function with given fields: ctx, session
func (_m *SessionRefresher) Change(ctx context.Context, session *entity.Session) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Session) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRefresher_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type SessionRefresher_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
//  - ctx context.Context
//  - session *entity.Session
func (_e *SessionRefresher_Expecter) Change(ctx interface{}, session interface{}) *SessionRefresher_Change_Call {
	return &SessionRefresher_Change_Call{Call: _e.mock.On("Change", ctx, session)}
}

func (_c *SessionRefresher_Change_Call) Run(run func(ctx context.Context, session *entity.Session)) *SessionRefresher_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Session))
	})
	return _c
}

func (_c *SessionRefresher_Change_Call) Return(_a0 error) *SessionRefresher_Change_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, sessionID
func (_m *SessionRefresher) Get(ctx context.Context, sessionID uuid.UUID) (*entity.Session, error) {
	ret := _m.Called(ctx, sessionID)

	var r0 *entity.Session
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Session); ok {
		r0 = rf(ctx, sessionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, sessionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SessionRefresher_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type SessionRefresher_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - sessionID uuid.UUID
func (_e *SessionRefresher_Expecter) Get(ctx interface{}, sessionID interface{}) *SessionRefresher_Get_Call {
	return &SessionRefresher_Get_Call{Call: _e.mock.On("Get", ctx, sessionID)}
}

func (_c *SessionRefresher_Get_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *SessionRefresher_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionRefresher_Get_Call) Return(_a0 *entity.Session, _a1 error) *SessionRefresher_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewSessionRefresher interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionRefresher creates a new instance of SessionRefresher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionRefresher(t mockConstructorTestingTNewSessionRefresher) *SessionRefresher {
	mock := &SessionRefresher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
