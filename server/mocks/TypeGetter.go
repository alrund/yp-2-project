// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// TypeGetter is an autogenerated mock type for the TypeGetter type
type TypeGetter struct {
	mock.Mock
}

type TypeGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *TypeGetter) EXPECT() *TypeGetter_Expecter {
	return &TypeGetter_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, tpID
func (_m *TypeGetter) Get(ctx context.Context, tpID uuid.UUID) (*entity.Type, error) {
	ret := _m.Called(ctx, tpID)

	var r0 *entity.Type
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.Type); ok {
		r0 = rf(ctx, tpID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Type)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, tpID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TypeGetter_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type TypeGetter_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - tpID uuid.UUID
func (_e *TypeGetter_Expecter) Get(ctx interface{}, tpID interface{}) *TypeGetter_Get_Call {
	return &TypeGetter_Get_Call{Call: _e.mock.On("Get", ctx, tpID)}
}

func (_c *TypeGetter_Get_Call) Run(run func(ctx context.Context, tpID uuid.UUID)) *TypeGetter_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *TypeGetter_Get_Call) Return(_a0 *entity.Type, _a1 error) *TypeGetter_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewTypeGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewTypeGetter creates a new instance of TypeGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTypeGetter(t mockConstructorTestingTNewTypeGetter) *TypeGetter {
	mock := &TypeGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
