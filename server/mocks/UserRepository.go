// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, user
func (_m *UserRepository) Add(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type UserRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - user *entity.User
func (_e *UserRepository_Expecter) Add(ctx interface{}, user interface{}) *UserRepository_Add_Call {
	return &UserRepository_Add_Call{Call: _e.mock.On("Add", ctx, user)}
}

func (_c *UserRepository_Add_Call) Run(run func(ctx context.Context, user *entity.User)) *UserRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *UserRepository_Add_Call) Return(_a0 error) *UserRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

// Change provides a mock function with given fields: ctx, user
func (_m *UserRepository) Change(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type UserRepository_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
//  - ctx context.Context
//  - user *entity.User
func (_e *UserRepository_Expecter) Change(ctx interface{}, user interface{}) *UserRepository_Change_Call {
	return &UserRepository_Change_Call{Call: _e.mock.On("Change", ctx, user)}
}

func (_c *UserRepository_Change_Call) Run(run func(ctx context.Context, user *entity.User)) *UserRepository_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *UserRepository_Change_Call) Return(_a0 error) *UserRepository_Change_Call {
	_c.Call.Return(_a0)
	return _c
}

// ChangePassword provides a mock function with given fields: ctx, user
func (_m *UserRepository) ChangePassword(ctx context.Context, user *entity.User) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_ChangePassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangePassword'
type UserRepository_ChangePassword_Call struct {
	*mock.Call
}

// ChangePassword is a helper method to define mock.On call
//  - ctx context.Context
//  - user *entity.User
func (_e *UserRepository_Expecter) ChangePassword(ctx interface{}, user interface{}) *UserRepository_ChangePassword_Call {
	return &UserRepository_ChangePassword_Call{Call: _e.mock.On("ChangePassword", ctx, user)}
}

func (_c *UserRepository_ChangePassword_Call) Run(run func(ctx context.Context, user *entity.User)) *UserRepository_ChangePassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.User))
	})
	return _c
}

func (_c *UserRepository_ChangePassword_Call) Return(_a0 error) *UserRepository_ChangePassword_Call {
	_c.Call.Return(_a0)
	return _c
}

// Get provides a mock function with given fields: ctx, userID
func (_m *UserRepository) Get(ctx context.Context, userID uuid.UUID) (*entity.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *entity.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type UserRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - userID uuid.UUID
func (_e *UserRepository_Expecter) Get(ctx interface{}, userID interface{}) *UserRepository_Get_Call {
	return &UserRepository_Get_Call{Call: _e.mock.On("Get", ctx, userID)}
}

func (_c *UserRepository_Get_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *UserRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserRepository_Get_Call) Return(_a0 *entity.User, _a1 error) *UserRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByCredential provides a mock function with given fields: ctx, login, passwordHash
func (_m *UserRepository) GetByCredential(ctx context.Context, login string, passwordHash string) (*entity.User, error) {
	ret := _m.Called(ctx, login, passwordHash)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *entity.User); ok {
		r0 = rf(ctx, login, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByCredential_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCredential'
type UserRepository_GetByCredential_Call struct {
	*mock.Call
}

// GetByCredential is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
//  - passwordHash string
func (_e *UserRepository_Expecter) GetByCredential(ctx interface{}, login interface{}, passwordHash interface{}) *UserRepository_GetByCredential_Call {
	return &UserRepository_GetByCredential_Call{Call: _e.mock.On("GetByCredential", ctx, login, passwordHash)}
}

func (_c *UserRepository_GetByCredential_Call) Run(run func(ctx context.Context, login string, passwordHash string)) *UserRepository_GetByCredential_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *UserRepository_GetByCredential_Call) Return(_a0 *entity.User, _a1 error) *UserRepository_GetByCredential_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByLogin provides a mock function with given fields: ctx, login
func (_m *UserRepository) GetByLogin(ctx context.Context, login string) (*entity.User, error) {
	ret := _m.Called(ctx, login)

	var r0 *entity.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.User); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetByLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByLogin'
type UserRepository_GetByLogin_Call struct {
	*mock.Call
}

// GetByLogin is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
func (_e *UserRepository_Expecter) GetByLogin(ctx interface{}, login interface{}) *UserRepository_GetByLogin_Call {
	return &UserRepository_GetByLogin_Call{Call: _e.mock.On("GetByLogin", ctx, login)}
}

func (_c *UserRepository_GetByLogin_Call) Run(run func(ctx context.Context, login string)) *UserRepository_GetByLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserRepository_GetByLogin_Call) Return(_a0 *entity.User, _a1 error) *UserRepository_GetByLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Remove provides a mock function with given fields: ctx, userID
func (_m *UserRepository) Remove(ctx context.Context, userID uuid.UUID) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRepository_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type UserRepository_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//  - ctx context.Context
//  - userID uuid.UUID
func (_e *UserRepository_Expecter) Remove(ctx interface{}, userID interface{}) *UserRepository_Remove_Call {
	return &UserRepository_Remove_Call{Call: _e.mock.On("Remove", ctx, userID)}
}

func (_c *UserRepository_Remove_Call) Run(run func(ctx context.Context, userID uuid.UUID)) *UserRepository_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *UserRepository_Remove_Call) Return(_a0 error) *UserRepository_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
