// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// SessionRemover is an autogenerated mock type for the SessionRemover type
type SessionRemover struct {
	mock.Mock
}

type SessionRemover_Expecter struct {
	mock *mock.Mock
}

func (_m *SessionRemover) EXPECT() *SessionRemover_Expecter {
	return &SessionRemover_Expecter{mock: &_m.Mock}
}

// Remove provides a mock function with given fields: ctx, sessionID
func (_m *SessionRemover) Remove(ctx context.Context, sessionID uuid.UUID) error {
	ret := _m.Called(ctx, sessionID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, sessionID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SessionRemover_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type SessionRemover_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//  - ctx context.Context
//  - sessionID uuid.UUID
func (_e *SessionRemover_Expecter) Remove(ctx interface{}, sessionID interface{}) *SessionRemover_Remove_Call {
	return &SessionRemover_Remove_Call{Call: _e.mock.On("Remove", ctx, sessionID)}
}

func (_c *SessionRemover_Remove_Call) Run(run func(ctx context.Context, sessionID uuid.UUID)) *SessionRemover_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *SessionRemover_Remove_Call) Return(_a0 error) *SessionRemover_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSessionRemover interface {
	mock.TestingT
	Cleanup(func())
}

// NewSessionRemover creates a new instance of SessionRemover. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSessionRemover(t mockConstructorTestingTNewSessionRemover) *SessionRemover {
	mock := &SessionRemover{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
