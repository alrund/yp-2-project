// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"
)

// Transactor is an autogenerated mock type for the Transactor type
type Transactor struct {
	mock.Mock
}

type Transactor_Expecter struct {
	mock *mock.Mock
}

func (_m *Transactor) EXPECT() *Transactor_Expecter {
	return &Transactor_Expecter{mock: &_m.Mock}
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *Transactor) ExecContext(ctx context.Context, query string, args ...interface{}) (sql.Result, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 sql.Result
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) sql.Result); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transactor_ExecContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecContext'
type Transactor_ExecContext_Call struct {
	*mock.Call
}

// ExecContext is a helper method to define mock.On call
//  - ctx context.Context
//  - query string
//  - args ...interface{}
func (_e *Transactor_Expecter) ExecContext(ctx interface{}, query interface{}, args ...interface{}) *Transactor_ExecContext_Call {
	return &Transactor_ExecContext_Call{Call: _e.mock.On("ExecContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Transactor_ExecContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Transactor_ExecContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Transactor_ExecContext_Call) Return(_a0 sql.Result, _a1 error) *Transactor_ExecContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *Transactor) QueryContext(ctx context.Context, query string, args ...interface{}) (*sql.Rows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Rows
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Rows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Transactor_QueryContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryContext'
type Transactor_QueryContext_Call struct {
	*mock.Call
}

// QueryContext is a helper method to define mock.On call
//  - ctx context.Context
//  - query string
//  - args ...interface{}
func (_e *Transactor_Expecter) QueryContext(ctx interface{}, query interface{}, args ...interface{}) *Transactor_QueryContext_Call {
	return &Transactor_QueryContext_Call{Call: _e.mock.On("QueryContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Transactor_QueryContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Transactor_QueryContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Transactor_QueryContext_Call) Return(_a0 *sql.Rows, _a1 error) *Transactor_QueryContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// QueryRowContext provides a mock function with given fields: ctx, query, args
func (_m *Transactor) QueryRowContext(ctx context.Context, query string, args ...interface{}) *sql.Row {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 *sql.Row
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *sql.Row); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	return r0
}

// Transactor_QueryRowContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryRowContext'
type Transactor_QueryRowContext_Call struct {
	*mock.Call
}

// QueryRowContext is a helper method to define mock.On call
//  - ctx context.Context
//  - query string
//  - args ...interface{}
func (_e *Transactor_Expecter) QueryRowContext(ctx interface{}, query interface{}, args ...interface{}) *Transactor_QueryRowContext_Call {
	return &Transactor_QueryRowContext_Call{Call: _e.mock.On("QueryRowContext",
		append([]interface{}{ctx, query}, args...)...)}
}

func (_c *Transactor_QueryRowContext_Call) Run(run func(ctx context.Context, query string, args ...interface{})) *Transactor_QueryRowContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *Transactor_QueryRowContext_Call) Return(_a0 *sql.Row) *Transactor_QueryRowContext_Call {
	_c.Call.Return(_a0)
	return _c
}

// WithinTransaction provides a mock function with given fields: ctx, tFunc
func (_m *Transactor) WithinTransaction(ctx context.Context, tFunc func(context.Context) error) error {
	ret := _m.Called(ctx, tFunc)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, tFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactor_WithinTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithinTransaction'
type Transactor_WithinTransaction_Call struct {
	*mock.Call
}

// WithinTransaction is a helper method to define mock.On call
//  - ctx context.Context
//  - tFunc func(context.Context) error
func (_e *Transactor_Expecter) WithinTransaction(ctx interface{}, tFunc interface{}) *Transactor_WithinTransaction_Call {
	return &Transactor_WithinTransaction_Call{Call: _e.mock.On("WithinTransaction", ctx, tFunc)}
}

func (_c *Transactor_WithinTransaction_Call) Run(run func(ctx context.Context, tFunc func(context.Context) error)) *Transactor_WithinTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context) error))
	})
	return _c
}

func (_c *Transactor_WithinTransaction_Call) Return(_a0 error) *Transactor_WithinTransaction_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTransactor interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactor creates a new instance of Transactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactor(t mockConstructorTestingTNewTransactor) *Transactor {
	mock := &Transactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
