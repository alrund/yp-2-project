// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/alrund/yp-2-project/server/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"
)

// TypeAdder is an autogenerated mock type for the TypeAdder type
type TypeAdder struct {
	mock.Mock
}

type TypeAdder_Expecter struct {
	mock *mock.Mock
}

func (_m *TypeAdder) EXPECT() *TypeAdder_Expecter {
	return &TypeAdder_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, tp
func (_m *TypeAdder) Add(ctx context.Context, tp *entity.Type) error {
	ret := _m.Called(ctx, tp)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Type) error); ok {
		r0 = rf(ctx, tp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TypeAdder_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type TypeAdder_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//  - ctx context.Context
//  - tp *entity.Type
func (_e *TypeAdder_Expecter) Add(ctx interface{}, tp interface{}) *TypeAdder_Add_Call {
	return &TypeAdder_Add_Call{Call: _e.mock.On("Add", ctx, tp)}
}

func (_c *TypeAdder_Add_Call) Run(run func(ctx context.Context, tp *entity.Type)) *TypeAdder_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entity.Type))
	})
	return _c
}

func (_c *TypeAdder_Add_Call) Return(_a0 error) *TypeAdder_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTypeAdder interface {
	mock.TestingT
	Cleanup(func())
}

// NewTypeAdder creates a new instance of TypeAdder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTypeAdder(t mockConstructorTestingTNewTypeAdder) *TypeAdder {
	mock := &TypeAdder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
