// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alrund/yp-2-project/client/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// GRPCClientUserGetter is an autogenerated mock type for the GRPCClientUserGetter type
type GRPCClientUserGetter struct {
	mock.Mock
}

type GRPCClientUserGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *GRPCClientUserGetter) EXPECT() *GRPCClientUserGetter_Expecter {
	return &GRPCClientUserGetter_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx
func (_m *GRPCClientUserGetter) GetUser(ctx context.Context) (*model.User, error) {
	ret := _m.Called(ctx)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context) *model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientUserGetter_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type GRPCClientUserGetter_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//  - ctx context.Context
func (_e *GRPCClientUserGetter_Expecter) GetUser(ctx interface{}) *GRPCClientUserGetter_GetUser_Call {
	return &GRPCClientUserGetter_GetUser_Call{Call: _e.mock.On("GetUser", ctx)}
}

func (_c *GRPCClientUserGetter_GetUser_Call) Run(run func(ctx context.Context)) *GRPCClientUserGetter_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GRPCClientUserGetter_GetUser_Call) Return(_a0 *model.User, _a1 error) *GRPCClientUserGetter_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGRPCClientUserGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewGRPCClientUserGetter creates a new instance of GRPCClientUserGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGRPCClientUserGetter(t mockConstructorTestingTNewGRPCClientUserGetter) *GRPCClientUserGetter {
	mock := &GRPCClientUserGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
