// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CLIScriptSupporter is an autogenerated mock type for the CLIScriptSupporter type
type CLIScriptSupporter struct {
	mock.Mock
}

type CLIScriptSupporter_Expecter struct {
	mock *mock.Mock
}

func (_m *CLIScriptSupporter) EXPECT() *CLIScriptSupporter_Expecter {
	return &CLIScriptSupporter_Expecter{mock: &_m.Mock}
}

// ListOfEntries provides a mock function with given fields: ctx, entries, data
func (_m *CLIScriptSupporter) ListOfEntries(ctx context.Context, entries []string, data interface{}) error {
	ret := _m.Called(ctx, entries, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) error); ok {
		r0 = rf(ctx, entries, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CLIScriptSupporter_ListOfEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListOfEntries'
type CLIScriptSupporter_ListOfEntries_Call struct {
	*mock.Call
}

// ListOfEntries is a helper method to define mock.On call
//  - ctx context.Context
//  - entries []string
//  - data interface{}
func (_e *CLIScriptSupporter_Expecter) ListOfEntries(ctx interface{}, entries interface{}, data interface{}) *CLIScriptSupporter_ListOfEntries_Call {
	return &CLIScriptSupporter_ListOfEntries_Call{Call: _e.mock.On("ListOfEntries", ctx, entries, data)}
}

func (_c *CLIScriptSupporter_ListOfEntries_Call) Run(run func(ctx context.Context, entries []string, data interface{})) *CLIScriptSupporter_ListOfEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(interface{}))
	})
	return _c
}

func (_c *CLIScriptSupporter_ListOfEntries_Call) Return(_a0 error) *CLIScriptSupporter_ListOfEntries_Call {
	_c.Call.Return(_a0)
	return _c
}

// Login provides a mock function with given fields: ctx, data
func (_m *CLIScriptSupporter) Login(ctx context.Context, data interface{}) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CLIScriptSupporter_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type CLIScriptSupporter_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//  - ctx context.Context
//  - data interface{}
func (_e *CLIScriptSupporter_Expecter) Login(ctx interface{}, data interface{}) *CLIScriptSupporter_Login_Call {
	return &CLIScriptSupporter_Login_Call{Call: _e.mock.On("Login", ctx, data)}
}

func (_c *CLIScriptSupporter_Login_Call) Run(run func(ctx context.Context, data interface{})) *CLIScriptSupporter_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *CLIScriptSupporter_Login_Call) Return(_a0 error) *CLIScriptSupporter_Login_Call {
	_c.Call.Return(_a0)
	return _c
}

// Registration provides a mock function with given fields: ctx, data
func (_m *CLIScriptSupporter) Registration(ctx context.Context, data interface{}) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CLIScriptSupporter_Registration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Registration'
type CLIScriptSupporter_Registration_Call struct {
	*mock.Call
}

// Registration is a helper method to define mock.On call
//  - ctx context.Context
//  - data interface{}
func (_e *CLIScriptSupporter_Expecter) Registration(ctx interface{}, data interface{}) *CLIScriptSupporter_Registration_Call {
	return &CLIScriptSupporter_Registration_Call{Call: _e.mock.On("Registration", ctx, data)}
}

func (_c *CLIScriptSupporter_Registration_Call) Run(run func(ctx context.Context, data interface{})) *CLIScriptSupporter_Registration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(interface{}))
	})
	return _c
}

func (_c *CLIScriptSupporter_Registration_Call) Return(_a0 error) *CLIScriptSupporter_Registration_Call {
	_c.Call.Return(_a0)
	return _c
}

// SelectCommand provides a mock function with given fields: ctx, options, data
func (_m *CLIScriptSupporter) SelectCommand(ctx context.Context, options []string, data interface{}) error {
	ret := _m.Called(ctx, options, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) error); ok {
		r0 = rf(ctx, options, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CLIScriptSupporter_SelectCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectCommand'
type CLIScriptSupporter_SelectCommand_Call struct {
	*mock.Call
}

// SelectCommand is a helper method to define mock.On call
//  - ctx context.Context
//  - options []string
//  - data interface{}
func (_e *CLIScriptSupporter_Expecter) SelectCommand(ctx interface{}, options interface{}, data interface{}) *CLIScriptSupporter_SelectCommand_Call {
	return &CLIScriptSupporter_SelectCommand_Call{Call: _e.mock.On("SelectCommand", ctx, options, data)}
}

func (_c *CLIScriptSupporter_SelectCommand_Call) Run(run func(ctx context.Context, options []string, data interface{})) *CLIScriptSupporter_SelectCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(interface{}))
	})
	return _c
}

func (_c *CLIScriptSupporter_SelectCommand_Call) Return(_a0 error) *CLIScriptSupporter_SelectCommand_Call {
	_c.Call.Return(_a0)
	return _c
}

// SelectLoginMethod provides a mock function with given fields: ctx, options, data
func (_m *CLIScriptSupporter) SelectLoginMethod(ctx context.Context, options []string, data interface{}) error {
	ret := _m.Called(ctx, options, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) error); ok {
		r0 = rf(ctx, options, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CLIScriptSupporter_SelectLoginMethod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectLoginMethod'
type CLIScriptSupporter_SelectLoginMethod_Call struct {
	*mock.Call
}

// SelectLoginMethod is a helper method to define mock.On call
//  - ctx context.Context
//  - options []string
//  - data interface{}
func (_e *CLIScriptSupporter_Expecter) SelectLoginMethod(ctx interface{}, options interface{}, data interface{}) *CLIScriptSupporter_SelectLoginMethod_Call {
	return &CLIScriptSupporter_SelectLoginMethod_Call{Call: _e.mock.On("SelectLoginMethod", ctx, options, data)}
}

func (_c *CLIScriptSupporter_SelectLoginMethod_Call) Run(run func(ctx context.Context, options []string, data interface{})) *CLIScriptSupporter_SelectLoginMethod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(interface{}))
	})
	return _c
}

func (_c *CLIScriptSupporter_SelectLoginMethod_Call) Return(_a0 error) *CLIScriptSupporter_SelectLoginMethod_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetEntry provides a mock function with given fields: ctx, types, data
func (_m *CLIScriptSupporter) SetEntry(ctx context.Context, types []string, data interface{}) error {
	ret := _m.Called(ctx, types, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) error); ok {
		r0 = rf(ctx, types, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CLIScriptSupporter_SetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEntry'
type CLIScriptSupporter_SetEntry_Call struct {
	*mock.Call
}

// SetEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - types []string
//  - data interface{}
func (_e *CLIScriptSupporter_Expecter) SetEntry(ctx interface{}, types interface{}, data interface{}) *CLIScriptSupporter_SetEntry_Call {
	return &CLIScriptSupporter_SetEntry_Call{Call: _e.mock.On("SetEntry", ctx, types, data)}
}

func (_c *CLIScriptSupporter_SetEntry_Call) Run(run func(ctx context.Context, types []string, data interface{})) *CLIScriptSupporter_SetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(interface{}))
	})
	return _c
}

func (_c *CLIScriptSupporter_SetEntry_Call) Return(_a0 error) *CLIScriptSupporter_SetEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCLIScriptSupporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewCLIScriptSupporter creates a new instance of CLIScriptSupporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCLIScriptSupporter(t mockConstructorTestingTNewCLIScriptSupporter) *CLIScriptSupporter {
	mock := &CLIScriptSupporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
