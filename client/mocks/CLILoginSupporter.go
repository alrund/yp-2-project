// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CLILoginSupporter is an autogenerated mock type for the CLILoginSupporter type
type CLILoginSupporter struct {
	mock.Mock
}

type CLILoginSupporter_Expecter struct {
	mock *mock.Mock
}

func (_m *CLILoginSupporter) EXPECT() *CLILoginSupporter_Expecter {
	return &CLILoginSupporter_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx
func (_m *CLILoginSupporter) Login(ctx context.Context) (interface{}, error) {
	ret := _m.Called(ctx)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context) interface{}); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CLILoginSupporter_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type CLILoginSupporter_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//  - ctx context.Context
func (_e *CLILoginSupporter_Expecter) Login(ctx interface{}) *CLILoginSupporter_Login_Call {
	return &CLILoginSupporter_Login_Call{Call: _e.mock.On("Login", ctx)}
}

func (_c *CLILoginSupporter_Login_Call) Run(run func(ctx context.Context)) *CLILoginSupporter_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *CLILoginSupporter_Login_Call) Return(_a0 interface{}, _a1 error) *CLILoginSupporter_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewCLILoginSupporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewCLILoginSupporter creates a new instance of CLILoginSupporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCLILoginSupporter(t mockConstructorTestingTNewCLILoginSupporter) *CLILoginSupporter {
	mock := &CLILoginSupporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
