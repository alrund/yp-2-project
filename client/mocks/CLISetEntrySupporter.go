// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CLISetEntrySupporter is an autogenerated mock type for the CLISetEntrySupporter type
type CLISetEntrySupporter struct {
	mock.Mock
}

type CLISetEntrySupporter_Expecter struct {
	mock *mock.Mock
}

func (_m *CLISetEntrySupporter) EXPECT() *CLISetEntrySupporter_Expecter {
	return &CLISetEntrySupporter_Expecter{mock: &_m.Mock}
}

// SetEntry provides a mock function with given fields: ctx, types, data
func (_m *CLISetEntrySupporter) SetEntry(ctx context.Context, types []string, data interface{}) error {
	ret := _m.Called(ctx, types, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, interface{}) error); ok {
		r0 = rf(ctx, types, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CLISetEntrySupporter_SetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEntry'
type CLISetEntrySupporter_SetEntry_Call struct {
	*mock.Call
}

// SetEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - types []string
//  - data interface{}
func (_e *CLISetEntrySupporter_Expecter) SetEntry(ctx interface{}, types interface{}, data interface{}) *CLISetEntrySupporter_SetEntry_Call {
	return &CLISetEntrySupporter_SetEntry_Call{Call: _e.mock.On("SetEntry", ctx, types, data)}
}

func (_c *CLISetEntrySupporter_SetEntry_Call) Run(run func(ctx context.Context, types []string, data interface{})) *CLISetEntrySupporter_SetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(interface{}))
	})
	return _c
}

func (_c *CLISetEntrySupporter_SetEntry_Call) Return(_a0 error) *CLISetEntrySupporter_SetEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewCLISetEntrySupporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewCLISetEntrySupporter creates a new instance of CLISetEntrySupporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCLISetEntrySupporter(t mockConstructorTestingTNewCLISetEntrySupporter) *CLISetEntrySupporter {
	mock := &CLISetEntrySupporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
