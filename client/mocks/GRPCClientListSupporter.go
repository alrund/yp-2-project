// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alrund/yp-2-project/client/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// GRPCClientListSupporter is an autogenerated mock type for the GRPCClientListSupporter type
type GRPCClientListSupporter struct {
	mock.Mock
}

type GRPCClientListSupporter_Expecter struct {
	mock *mock.Mock
}

func (_m *GRPCClientListSupporter) EXPECT() *GRPCClientListSupporter_Expecter {
	return &GRPCClientListSupporter_Expecter{mock: &_m.Mock}
}

// GetAllEntries provides a mock function with given fields: ctx
func (_m *GRPCClientListSupporter) GetAllEntries(ctx context.Context) ([]*model.Entry, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Entry
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Entry); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientListSupporter_GetAllEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEntries'
type GRPCClientListSupporter_GetAllEntries_Call struct {
	*mock.Call
}

// GetAllEntries is a helper method to define mock.On call
//  - ctx context.Context
func (_e *GRPCClientListSupporter_Expecter) GetAllEntries(ctx interface{}) *GRPCClientListSupporter_GetAllEntries_Call {
	return &GRPCClientListSupporter_GetAllEntries_Call{Call: _e.mock.On("GetAllEntries", ctx)}
}

func (_c *GRPCClientListSupporter_GetAllEntries_Call) Run(run func(ctx context.Context)) *GRPCClientListSupporter_GetAllEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GRPCClientListSupporter_GetAllEntries_Call) Return(_a0 []*model.Entry, _a1 error) *GRPCClientListSupporter_GetAllEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEntry provides a mock function with given fields: ctx, entryID
func (_m *GRPCClientListSupporter) GetEntry(ctx context.Context, entryID string) (*model.Entry, error) {
	ret := _m.Called(ctx, entryID)

	var r0 *model.Entry
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Entry); ok {
		r0 = rf(ctx, entryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientListSupporter_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type GRPCClientListSupporter_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - entryID string
func (_e *GRPCClientListSupporter_Expecter) GetEntry(ctx interface{}, entryID interface{}) *GRPCClientListSupporter_GetEntry_Call {
	return &GRPCClientListSupporter_GetEntry_Call{Call: _e.mock.On("GetEntry", ctx, entryID)}
}

func (_c *GRPCClientListSupporter_GetEntry_Call) Run(run func(ctx context.Context, entryID string)) *GRPCClientListSupporter_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GRPCClientListSupporter_GetEntry_Call) Return(_a0 *model.Entry, _a1 error) *GRPCClientListSupporter_GetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewGRPCClientListSupporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewGRPCClientListSupporter creates a new instance of GRPCClientListSupporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGRPCClientListSupporter(t mockConstructorTestingTNewGRPCClientListSupporter) *GRPCClientListSupporter {
	mock := &GRPCClientListSupporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
