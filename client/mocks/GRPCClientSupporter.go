// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/alrund/yp-2-project/client/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// GRPCClientSupporter is an autogenerated mock type for the GRPCClientSupporter type
type GRPCClientSupporter struct {
	mock.Mock
}

type GRPCClientSupporter_Expecter struct {
	mock *mock.Mock
}

func (_m *GRPCClientSupporter) EXPECT() *GRPCClientSupporter_Expecter {
	return &GRPCClientSupporter_Expecter{mock: &_m.Mock}
}

// GetAllEntries provides a mock function with given fields: ctx
func (_m *GRPCClientSupporter) GetAllEntries(ctx context.Context) ([]*model.Entry, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Entry
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Entry); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientSupporter_GetAllEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllEntries'
type GRPCClientSupporter_GetAllEntries_Call struct {
	*mock.Call
}

// GetAllEntries is a helper method to define mock.On call
//  - ctx context.Context
func (_e *GRPCClientSupporter_Expecter) GetAllEntries(ctx interface{}) *GRPCClientSupporter_GetAllEntries_Call {
	return &GRPCClientSupporter_GetAllEntries_Call{Call: _e.mock.On("GetAllEntries", ctx)}
}

func (_c *GRPCClientSupporter_GetAllEntries_Call) Run(run func(ctx context.Context)) *GRPCClientSupporter_GetAllEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GRPCClientSupporter_GetAllEntries_Call) Return(_a0 []*model.Entry, _a1 error) *GRPCClientSupporter_GetAllEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllTypes provides a mock function with given fields: ctx
func (_m *GRPCClientSupporter) GetAllTypes(ctx context.Context) ([]*model.Type, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Type
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Type); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Type)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientSupporter_GetAllTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTypes'
type GRPCClientSupporter_GetAllTypes_Call struct {
	*mock.Call
}

// GetAllTypes is a helper method to define mock.On call
//  - ctx context.Context
func (_e *GRPCClientSupporter_Expecter) GetAllTypes(ctx interface{}) *GRPCClientSupporter_GetAllTypes_Call {
	return &GRPCClientSupporter_GetAllTypes_Call{Call: _e.mock.On("GetAllTypes", ctx)}
}

func (_c *GRPCClientSupporter_GetAllTypes_Call) Run(run func(ctx context.Context)) *GRPCClientSupporter_GetAllTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GRPCClientSupporter_GetAllTypes_Call) Return(_a0 []*model.Type, _a1 error) *GRPCClientSupporter_GetAllTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEntry provides a mock function with given fields: ctx, entryID
func (_m *GRPCClientSupporter) GetEntry(ctx context.Context, entryID string) (*model.Entry, error) {
	ret := _m.Called(ctx, entryID)

	var r0 *model.Entry
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Entry); ok {
		r0 = rf(ctx, entryID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Entry)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, entryID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientSupporter_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type GRPCClientSupporter_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - entryID string
func (_e *GRPCClientSupporter_Expecter) GetEntry(ctx interface{}, entryID interface{}) *GRPCClientSupporter_GetEntry_Call {
	return &GRPCClientSupporter_GetEntry_Call{Call: _e.mock.On("GetEntry", ctx, entryID)}
}

func (_c *GRPCClientSupporter_GetEntry_Call) Run(run func(ctx context.Context, entryID string)) *GRPCClientSupporter_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GRPCClientSupporter_GetEntry_Call) Return(_a0 *model.Entry, _a1 error) *GRPCClientSupporter_GetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetUser provides a mock function with given fields: ctx
func (_m *GRPCClientSupporter) GetUser(ctx context.Context) (*model.User, error) {
	ret := _m.Called(ctx)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(context.Context) *model.User); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientSupporter_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type GRPCClientSupporter_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//  - ctx context.Context
func (_e *GRPCClientSupporter_Expecter) GetUser(ctx interface{}) *GRPCClientSupporter_GetUser_Call {
	return &GRPCClientSupporter_GetUser_Call{Call: _e.mock.On("GetUser", ctx)}
}

func (_c *GRPCClientSupporter_GetUser_Call) Run(run func(ctx context.Context)) *GRPCClientSupporter_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GRPCClientSupporter_GetUser_Call) Return(_a0 *model.User, _a1 error) *GRPCClientSupporter_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IsEmptySessionKey provides a mock function with given fields:
func (_m *GRPCClientSupporter) IsEmptySessionKey() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GRPCClientSupporter_IsEmptySessionKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsEmptySessionKey'
type GRPCClientSupporter_IsEmptySessionKey_Call struct {
	*mock.Call
}

// IsEmptySessionKey is a helper method to define mock.On call
func (_e *GRPCClientSupporter_Expecter) IsEmptySessionKey() *GRPCClientSupporter_IsEmptySessionKey_Call {
	return &GRPCClientSupporter_IsEmptySessionKey_Call{Call: _e.mock.On("IsEmptySessionKey")}
}

func (_c *GRPCClientSupporter_IsEmptySessionKey_Call) Run(run func()) *GRPCClientSupporter_IsEmptySessionKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GRPCClientSupporter_IsEmptySessionKey_Call) Return(_a0 bool) *GRPCClientSupporter_IsEmptySessionKey_Call {
	_c.Call.Return(_a0)
	return _c
}

// Login provides a mock function with given fields: ctx, login, password
func (_m *GRPCClientSupporter) Login(ctx context.Context, login string, password string) (string, error) {
	ret := _m.Called(ctx, login, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientSupporter_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type GRPCClientSupporter_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//  - ctx context.Context
//  - login string
//  - password string
func (_e *GRPCClientSupporter_Expecter) Login(ctx interface{}, login interface{}, password interface{}) *GRPCClientSupporter_Login_Call {
	return &GRPCClientSupporter_Login_Call{Call: _e.mock.On("Login", ctx, login, password)}
}

func (_c *GRPCClientSupporter_Login_Call) Run(run func(ctx context.Context, login string, password string)) *GRPCClientSupporter_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *GRPCClientSupporter_Login_Call) Return(_a0 string, _a1 error) *GRPCClientSupporter_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Registration provides a mock function with given fields: ctx, name, login, password
func (_m *GRPCClientSupporter) Registration(ctx context.Context, name string, login string, password string) (string, error) {
	ret := _m.Called(ctx, name, login, password)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) string); ok {
		r0 = rf(ctx, name, login, password)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, name, login, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GRPCClientSupporter_Registration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Registration'
type GRPCClientSupporter_Registration_Call struct {
	*mock.Call
}

// Registration is a helper method to define mock.On call
//  - ctx context.Context
//  - name string
//  - login string
//  - password string
func (_e *GRPCClientSupporter_Expecter) Registration(ctx interface{}, name interface{}, login interface{}, password interface{}) *GRPCClientSupporter_Registration_Call {
	return &GRPCClientSupporter_Registration_Call{Call: _e.mock.On("Registration", ctx, name, login, password)}
}

func (_c *GRPCClientSupporter_Registration_Call) Run(run func(ctx context.Context, name string, login string, password string)) *GRPCClientSupporter_Registration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *GRPCClientSupporter_Registration_Call) Return(_a0 string, _a1 error) *GRPCClientSupporter_Registration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// SetEntry provides a mock function with given fields: ctx, typeID, name, metadata, data
func (_m *GRPCClientSupporter) SetEntry(ctx context.Context, typeID string, name string, metadata string, data []byte) error {
	ret := _m.Called(ctx, typeID, name, metadata, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, []byte) error); ok {
		r0 = rf(ctx, typeID, name, metadata, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GRPCClientSupporter_SetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetEntry'
type GRPCClientSupporter_SetEntry_Call struct {
	*mock.Call
}

// SetEntry is a helper method to define mock.On call
//  - ctx context.Context
//  - typeID string
//  - name string
//  - metadata string
//  - data []byte
func (_e *GRPCClientSupporter_Expecter) SetEntry(ctx interface{}, typeID interface{}, name interface{}, metadata interface{}, data interface{}) *GRPCClientSupporter_SetEntry_Call {
	return &GRPCClientSupporter_SetEntry_Call{Call: _e.mock.On("SetEntry", ctx, typeID, name, metadata, data)}
}

func (_c *GRPCClientSupporter_SetEntry_Call) Run(run func(ctx context.Context, typeID string, name string, metadata string, data []byte)) *GRPCClientSupporter_SetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(string), args[4].([]byte))
	})
	return _c
}

func (_c *GRPCClientSupporter_SetEntry_Call) Return(_a0 error) *GRPCClientSupporter_SetEntry_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetGRPCClient provides a mock function with given fields: client
func (_m *GRPCClientSupporter) SetGRPCClient(client interface{}) error {
	ret := _m.Called(client)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GRPCClientSupporter_SetGRPCClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetGRPCClient'
type GRPCClientSupporter_SetGRPCClient_Call struct {
	*mock.Call
}

// SetGRPCClient is a helper method to define mock.On call
//  - client interface{}
func (_e *GRPCClientSupporter_Expecter) SetGRPCClient(client interface{}) *GRPCClientSupporter_SetGRPCClient_Call {
	return &GRPCClientSupporter_SetGRPCClient_Call{Call: _e.mock.On("SetGRPCClient", client)}
}

func (_c *GRPCClientSupporter_SetGRPCClient_Call) Run(run func(client interface{})) *GRPCClientSupporter_SetGRPCClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *GRPCClientSupporter_SetGRPCClient_Call) Return(_a0 error) *GRPCClientSupporter_SetGRPCClient_Call {
	_c.Call.Return(_a0)
	return _c
}

// SetSessionKey provides a mock function with given fields: sessionKey
func (_m *GRPCClientSupporter) SetSessionKey(sessionKey string) error {
	ret := _m.Called(sessionKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(sessionKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GRPCClientSupporter_SetSessionKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetSessionKey'
type GRPCClientSupporter_SetSessionKey_Call struct {
	*mock.Call
}

// SetSessionKey is a helper method to define mock.On call
//  - sessionKey string
func (_e *GRPCClientSupporter_Expecter) SetSessionKey(sessionKey interface{}) *GRPCClientSupporter_SetSessionKey_Call {
	return &GRPCClientSupporter_SetSessionKey_Call{Call: _e.mock.On("SetSessionKey", sessionKey)}
}

func (_c *GRPCClientSupporter_SetSessionKey_Call) Run(run func(sessionKey string)) *GRPCClientSupporter_SetSessionKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *GRPCClientSupporter_SetSessionKey_Call) Return(_a0 error) *GRPCClientSupporter_SetSessionKey_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewGRPCClientSupporter interface {
	mock.TestingT
	Cleanup(func())
}

// NewGRPCClientSupporter creates a new instance of GRPCClientSupporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGRPCClientSupporter(t mockConstructorTestingTNewGRPCClientSupporter) *GRPCClientSupporter {
	mock := &GRPCClientSupporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
